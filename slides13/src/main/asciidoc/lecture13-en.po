msgid ""
msgstr ""
"Project-Id-Version: slides 13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-24 21:46+0300\n"
"PO-Revision-Date: 2024-02-01 11:52+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: en_UK\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.4.2\n"

#: lecture.adoc:26
msgid ""
"= Core Java. Лекция 13: Dependency Injection. Принцип работы DI-контейнера. "
"Принцип работы DI-контейнера (окончание). Spring Framework (Spring DI, "
"Spring AOP)\n"
"Иван Пономарёв, КУРС/МФТИ\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900\n"
":stem: latexmath\n"
":zsp: &#8203;"
msgstr ""
"= Core Java. Lecture #13: Dependency Injection. DI containers working "
"principle. Spring Framework (Spring DI, Spring AOP)\n"
"Ivan Ponomarev, Synthesized.io/MIPT\n"
":revealjs_theme: black\n"
":revealjs_customtheme: white_course.css\n"
":revealjs_slideNumber:\n"
":revealjs_history:\n"
":revealjs_progress:\n"
":encoding: UTF-8\n"
":lang: ru\n"
"include::_doc_general_attributes.adoc[]\n"
":doctype: article\n"
":toclevels: 3\n"
":imagesdir: images\n"
":source-highlighter: highlightjs\n"
":highlightjsdir: highlight\n"
":icons: font\n"
":iconfont-remote!:\n"
":iconfont-name: font-awesome-4.7.0/css/font-awesome\n"
":revealjs_mouseWheel: true\n"
":revealjs_center: false\n"
":revealjs_transition: none\n"
":revealjs_width: 1600\n"
":revealjs_height: 900\n"
":stem: latexmath\n"
":zsp: &#8203;"

#: lecture.adoc:29
msgid ":!figure-caption:"
msgstr ":!figure-caption:"

#: lecture.adoc:31
msgid "ponomarev@corchestra.ru"
msgstr "ponomarev@corchestra.ru"

#: lecture.adoc:33
msgid "icon:twitter[size=lg] @inponomarev"
msgstr "icon:twitter[size=lg] @inponomarev"

#: lecture.adoc:35
msgctxt "lecture.adoc:35"
msgid "== Проблемы GoF-cинглетона"
msgstr "== GoF's Singleton problems"

#: lecture.adoc:37
msgid ""
"Как автоматически тестировать компоненты, которые жёстко связаны со своими "
"зависимостями через статические поля/методы?"
msgstr ""
"How do I automatically test components that are hard-coded to their "
"dependencies through static fields/methods?"

#: lecture.adoc:40
msgid ""
"[.fragment]\n"
"-- Да никак!"
msgstr ""
"[.fragment]\n"
"- No way you can do it!"

#: lecture.adoc:42
msgctxt "lecture.adoc:42"
msgid "== Проблемы GoF-cинглетона"
msgstr "== GoF's Singleton problems"

#: lecture.adoc:46
msgid ""
"* Увеличивает Coupling\n"
"* Нарушает Single Responsibility Principle\n"
"* Невозможно нормально тестировать"
msgstr ""
"* Increases coupling\n"
"* Violates the Single Responsibility Principle\n"
"* Unable to test normally"

#: lecture.adoc:49
msgid "== Наш учебный пример про доклады и спикеров"
msgstr "== Our case study about talks and speakers"

#: lecture.adoc:60
msgid ""
"[plantuml, objects, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180 \n"
"object ConnectionPool\n"
"object JdbcTemplate\n"
"object ConferenceDao\n"
"object SpeakerDao\n"
"object TalkDao\n"
"object Controller"
msgstr ""
"[plantuml, objects, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180 \n"
"object ConnectionPool\n"
"object JdbcTemplate\n"
"object ConferenceDao\n"
"object SpeakerDao\n"
"object TalkDao\n"
"object Controller"

#: lecture.adoc:70
msgid ""
"JdbcTemplate -->ConnectionPool\n"
"SpeakerDao --> JdbcTemplate\n"
"TalkDao --> JdbcTemplate\n"
"ConferenceDao --> JdbcTemplate\n"
"Controller --> SpeakerDao\n"
"Controller --> TalkDao\n"
"Controller --> ConferenceDao\n"
"@enduml\n"
"----"
msgstr ""
"JdbcTemplate -->ConnectionPool\n"
"SpeakerDao --> JdbcTemplate\n"
"TalkDao --> JdbcTemplate\n"
"ConferenceDao --> JdbcTemplate\n"
"Controller --> SpeakerDao\n"
"Controller --> TalkDao\n"
"Controller --> ConferenceDao\n"
"@enduml\n"
"----"

#: lecture.adoc:72
msgctxt "lecture.adoc:72"
msgid "== Фабрика"
msgstr "== Factory"

#: lecture.adoc:85
msgid ""
"[source,java]\n"
"----\n"
"// вынесли весь \"wiring\" из классов в фабричный метод\n"
"public static Controller makeController() {\n"
"  DataSource dataSource = \n"
"                new DataSource(ConnectionPool.getInstance());\n"
"  ConferenceDao conferenceDao = new ConferenceDao(dataSource);\n"
"  SpeakerDao speakerDao = new SpeakerDao(dataSource);\n"
"  TalkDao talkDao = new TalkDao(dataSource);\n"
"  return new Controller(conferenceDao, speakerDao, talkDao);\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"//took all the \"wiring\" from the classes to the factory method\n"
"public static Controller makeController() {\n"
"  DataSource dataSource = \n"
"                new DataSource(ConnectionPool.getInstance());\n"
"  ConferenceDao conferenceDao = new ConferenceDao(dataSource);\n"
"  SpeakerDao speakerDao = new SpeakerDao(dataSource);\n"
"  TalkDao talkDao = new TalkDao(dataSource);\n"
"  return new Controller(conferenceDao, speakerDao, talkDao);\n"
"}\n"
"----"

#: lecture.adoc:87
msgctxt "lecture.adoc:87"
msgid "== Фабрика"
msgstr "== Factory"

#: lecture.adoc:91
msgid ""
"* Мы отвязались от «wiring» и можем создавать компоненты по отдельности, что "
"позволяет тестировать.\n"
"* Однако в фабричном методе много повторяющихся действий, фабрика должна "
"«знать» про все компоненты.\n"
"* Вообще этот процесс можно автоматизировать!"
msgstr ""
"* We got rid of \"wiring\" and can create components separately, which "
"allows us to test.\n"
"* However, in the factory method there are many repetitive actions, the "
"factory must \"know\" about all the components.\n"
"* In general, this process can be automated!"

#: lecture.adoc:93
msgctxt "lecture.adoc:93"
msgid "== Dependency Injection"
msgstr "== Dependency Injection"

#: lecture.adoc:99
msgid ""
"[plantuml, di-class, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180\n"
"hide footbox"
msgstr ""
"[plantuml, di-class, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180\n"
"hide footbox"

#: lecture.adoc:106
msgid ""
"class Injector\n"
"interface ServiceA\n"
"interface ServiceB\n"
"class ServiceAImpl\n"
"class ServiceBImpl\n"
"class Client"
msgstr ""
"class Injector\n"
"interface ServiceA\n"
"interface ServiceB\n"
"class ServiceAImpl\n"
"class ServiceBImpl\n"
"class Client"

#: lecture.adoc:109
msgid ""
"Client --> ServiceA\n"
"Client --> ServiceB"
msgstr ""
"Client --> ServiceA\n"
"Client --> ServiceB"

#: lecture.adoc:112
msgid ""
"ServiceA <|.. ServiceAImpl\n"
"ServiceB <|.. ServiceBImpl"
msgstr ""
"ServiceA <|.. ServiceAImpl\n"
"ServiceB <|.. ServiceBImpl"

#: lecture.adoc:116
msgid ""
"Injector .> Client: <<create>>\\n<<inject>>\n"
"Injector ..> ServiceAImpl: <<create>>\n"
"Injector ..> ServiceBImpl: <<create>>"
msgstr ""
"Injector .> Client: <<create>>\\n<<inject>>\n"
"Injector ..> ServiceAImpl: <<create>>\n"
"Injector ..> ServiceBImpl: <<create>>"

#: lecture.adoc:119
msgctxt "lecture.adoc:119"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: lecture.adoc:123
msgctxt "lecture.adoc:123"
msgid "== Dependency Injection"
msgstr "== Dependency Injection"

#: lecture.adoc:129
msgid ""
"[plantuml, di-seq, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180\n"
"hide footbox"
msgstr ""
"[plantuml, di-seq, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 180\n"
"hide footbox"

#: lecture.adoc:134
msgid ""
"participant Injector\n"
"participant ServiceAImpl\n"
"participant ServiceBImpl\n"
"participant Client"
msgstr ""
"participant Injector\n"
"participant ServiceAImpl\n"
"participant ServiceBImpl\n"
"participant Client"

#: lecture.adoc:140
msgid ""
"activate Injector\n"
"Injector -> ServiceAImpl **: new()\n"
"Injector -> ServiceBImpl **: new()\n"
"Injector -> Client **: new()\n"
"Injector -> Client: inject(ServiceAImpl, ServiceBImpl)"
msgstr ""
"activate Injector\n"
"Injector -> ServiceAImpl **: new()\n"
"Injector -> ServiceBImpl **: new()\n"
"Injector -> Client **: new()\n"
"Injector -> Client: inject(ServiceAImpl, ServiceBImpl)"

#: lecture.adoc:143
msgctxt "lecture.adoc:143"
msgid ""
"@enduml\n"
"----"
msgstr ""
"@enduml\n"
"----"

#: lecture.adoc:145
msgid "== DI Frameworks"
msgstr "== DI Frameworks"

#: lecture.adoc:150
msgid ""
"* Google Guice\n"
"* JBoss Seam Framework\n"
"* PicoContainer\n"
"* *Spring*"
msgstr ""
"* Google Guice\n"
"* JBoss Seam Framework\n"
"* PicoContainer\n"
"* *Spring*"

#: lecture.adoc:152
msgid "== Построим свой DI-фреймворк «на коленке»"
msgstr "== Let's build our own homemade DI-framework"

#: lecture.adoc:155
msgid ""
"* Пример на базе тренинга Евгения Борисова «Spring Ripper»\n"
"* Позволяет понять логику и внутреннее устройство Spring Framework"
msgstr ""
"* Example based on Evgeny Borisov's training \"Spring Ripper\"\n"
"* Allows you to understand the logic and internals of the Spring Framework"

#: lecture.adoc:157
msgctxt "lecture.adoc:157"
msgid "== Лектор-робот"
msgstr "== Robot lecturer"

#: lecture.adoc:166
msgctxt "lecture.adoc:166"
msgid ""
"[plantuml, robotlecturer, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 \n"
"object RobotLecturer\n"
"object Lecture\n"
"object Speaker\n"
"object SlideShow"
msgstr ""
"[plantuml, robotlecturer, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 \n"
"object RobotLecturer\n"
"object Lecture\n"
"object Speaker\n"
"object SlideShow"

#: lecture.adoc:172
msgid ""
"RobotLecturer --> Lecture\n"
"RobotLecturer --> Speaker\n"
"RobotLecturer --> SlideShow\n"
"@enduml\n"
"----    "
msgstr ""
"RobotLecturer --> Lecture\n"
"RobotLecturer --> Speaker\n"
"RobotLecturer --> SlideShow\n"
"@enduml\n"
"----    "

#: lecture.adoc:186
msgctxt "lecture.adoc:186"
msgid ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"    //«магическим» образом пусть тут появится то, что нужно!\n"
"    @InjectByType\n"
"    private Lecture lecture;\n"
"    @InjectByType\n"
"    private Speaker speaker;\n"
"    @InjectByType\n"
"    private SlideShow slideShow;\n"
"    ...\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"    //let what we need just magically appear here!\n"
"    @InjectByType\n"
"    private Lecture lecture;\n"
"    @InjectByType\n"
"    private Speaker speaker;\n"
"    @InjectByType\n"
"    private SlideShow slideShow;\n"
"    ...\n"
"}\n"
"----"

#: lecture.adoc:188
msgctxt "lecture.adoc:188"
msgid "== Режим лектора"
msgstr "== Lecturer mode"

#: lecture.adoc:200
msgctxt "lecture.adoc:200"
msgid ""
"[source,java]\n"
"----\n"
"//Читать лекции просто\n"
"public void lecture() {\n"
"    lecture.getSlides().forEach(\n"
"        slide -> {\n"
"            slideShow.show(slide.getText());\n"
"            speaker.speak(slide.getComment());\n"
"        }\n"
"    );\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"//It's easy to read lectures\n"
"public void lecture() {\n"
"    lecture.getSlides().forEach(\n"
"        slide -> {\n"
"            slideShow.show(slide.getText());\n"
"            speaker.speak(slide.getComment());\n"
"        }\n"
"    );\n"
"}"

#: lecture.adoc:209
msgctxt "lecture.adoc:209"
msgid ""
"//Main-метод\n"
"public static void main(String[] args) \n"
"                  throws ReflectiveOperationException {\n"
"    RobotLecturer lecturer = \n"
"        new ObjectFactory().createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"}\n"
"----"
msgstr ""
"//Main method\n"
"public static void main(String[] args) \n"
"                  throws ReflectiveOperationException {\n"
"    RobotLecturer lecturer = \n"
"        new ObjectFactory().createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"}\n"
"----"

#: lecture.adoc:211
msgctxt "lecture.adoc:211"
msgid "== Конфигуратор объекта"
msgstr "== Object Configurator"

#: lecture.adoc:219
msgctxt "lecture.adoc:219"
msgid ""
"[source,java]\n"
"----\n"
"@RequiredArgsConstructor\n"
"public class InjectByTypeAnnotationObjectConfigurator \n"
"                             implements ObjectConfigurator {\n"
"  //передадим сюда через конструктор ObjectFactory\n"
"  private final ObjectFactory factory;"
msgstr ""
"[source,java]\n"
"----\n"
"@RequiredArgsConstructor\n"
"public class InjectByTypeAnnotationObjectConfigurator \n"
"                             implements ObjectConfigurator {\n"
"  //let's pass the ObjectFactory here as a constructor parameter\n"
"  private final ObjectFactory factory;"

#: lecture.adoc:232
msgctxt "lecture.adoc:232"
msgid ""
"  @Override\n"
"  public void configure(Object t) throws ... {\n"
"    for (Field field : t.getClass().getDeclaredFields()) {\n"
"      if (field.isAnnotationPresent(InjectByType.class)) {\n"
"        field.setAccessible(true);\n"
"        //Мы же умеем по типу создавать объект?\n"
"        field.set(t, factory.createObject(field.getType()));\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"
msgstr ""
"  @Override\n"
"  public void configure(Object t) throws ... {\n"
"    for (Field field : t.getClass().getDeclaredFields()) {\n"
"      if (field.isAnnotationPresent(InjectByType.class)) {\n"
"        field.setAccessible(true);\n"
"        //Do we know how to create an object by its type?\n"
"        field.set(t, factory.createObject(field.getType()));\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:234
msgctxt "lecture.adoc:234"
msgid "== Как создаётся и конфигурируется объект"
msgstr "== How an object is being created and configured"

#: lecture.adoc:243
msgctxt "lecture.adoc:243"
msgid ""
"[source,java]\n"
"----\n"
"public class ObjectFactory {\n"
"  //Правда, тут напрашивается DI?\n"
"  private final Reflections scanner = \n"
"                          new Reflections(\"edu.phystech\");\n"
"  private final List<ObjectConfigurator> configurators = \n"
"                          new ArrayList<>();"
msgstr ""
"[source,java]\n"
"----\n"
"public class ObjectFactory {\n"
"  //Don't we need DI here also?\n"
"  private final Reflections scanner = \n"
"                          new Reflections(\"edu.phystech\");\n"
"  private final List<ObjectConfigurator> configurators = \n"
"                          new ArrayList<>();"

#: lecture.adoc:254
msgctxt "lecture.adoc:254"
msgid ""
"  public <T> T createObject(Class<? extends T> type) throws ... {\n"
"    //Находим реализацию запрошенного типа\n"
"    type = resolveImpl(type);\n"
"    //Создаём объект (с помощью конструктора по умолчанию, TODO)\n"
"    T t = type.newInstance();\n"
"    //Конфигурируем\n"
"    configure(t);\n"
"    ....\n"
"  }\n"
"----"
msgstr ""
"  public <T> T createObject(Class<? extends T> type) throws ... {\n"
"    //Let's find an implementation of the requested type\n"
"    type = resolveImpl(type);\n"
"    //Let's create an instance (using the default constructor, TODO)\n"
"    T t = type.newInstance();\n"
"    //Configuring\n"
"    configure(t);\n"
"    ....\n"
"  }\n"
"----"

#: lecture.adoc:256
msgctxt "lecture.adoc:256"
msgid "== Метод configure очень прост"
msgstr "== The `configure` method is very simple"

#: lecture.adoc:258
msgctxt "lecture.adoc:258"
msgid "[source,java]"
msgstr "[source,java]"

#: lecture.adoc:266
msgctxt "lecture.adoc:266"
msgid ""
"----\n"
"  private <T> void configure(T t) throws ... {\n"
"    for (ObjectConfigurator configurator : configurators) {\n"
"      configurator.configure(t);\n"
"    }\n"
"  }\n"
"----"
msgstr ""
"----\n"
"  private <T> void configure(T t) throws ... {\n"
"    for (ObjectConfigurator configurator : configurators) {\n"
"      configurator.configure(t);\n"
"    }\n"
"  }\n"
"----"

#: lecture.adoc:268
msgctxt "lecture.adoc:268"
msgid "== Как находится подходящая имплементация"
msgstr "== How is the appropriate implementation found?"

#: lecture.adoc:285
msgctxt "lecture.adoc:285"
msgid ""
"[source,java]\n"
"----\n"
"private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
"  if (type.isInterface()) {\n"
"    Set<Class<? extends T>> classes = \n"
"                         scanner.getSubTypesOf((Class<T>) type);\n"
"    if (classes.size() != 1) {\n"
"      throw new RuntimeException(\n"
"         \"0 or more than one implementation found for type \" \n"
"         + type + \" please update your config\");\n"
"    }\n"
"    type = classes.iterator().next();\n"
"  }\n"
"  return type;\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
"  if (type.isInterface()) {\n"
"    Set<Class<? extends T>> classes = \n"
"                         scanner.getSubTypesOf((Class<T>) type);\n"
"    if (classes.size() != 1) {\n"
"      throw new RuntimeException(\n"
"         \"0 or more than one implementation found for type \" \n"
"         + type + \" please update your config\");\n"
"    }\n"
"    type = classes.iterator().next();\n"
"  }\n"
"  return type;\n"
"}\n"
"----"

#: lecture.adoc:288
msgctxt "lecture.adoc:288"
msgid "== Лектор-робот"
msgstr "== Robot lecturer"

#: lecture.adoc:297
msgctxt "lecture.adoc:297"
msgid ""
"[plantuml, robotlecturer, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 \n"
"object RobotLecturer\n"
"object Lecture\n"
"object Speaker\n"
"object SlideShow"
msgstr ""
"[plantuml, robotlecturer, png]\n"
"----\n"
"@startuml\n"
"skinparam dpi 150 \n"
"object RobotLecturer\n"
"object Lecture\n"
"object Speaker\n"
"object SlideShow"

#: lecture.adoc:303
msgid ""
"RobotLecturer --> Lecture\n"
"RobotLecturer --> Speaker\n"
"RobotLecturer --> SlideShow\n"
"@enduml\n"
"----"
msgstr ""
"RobotLecturer --> Lecture\n"
"RobotLecturer --> Speaker\n"
"RobotLecturer --> SlideShow\n"
"@enduml\n"
"----"

#: lecture.adoc:317
msgctxt "lecture.adoc:317"
msgid ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"    //«магическим» образом пусть тут появится то, что нужно!\n"
"    @InjectByType\n"
"    private Lecture lecture;\n"
"    @InjectByType\n"
"    private Speaker speaker;\n"
"    @InjectByType\n"
"    private SlideShow slideShow;\n"
"    ...\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"    //let what we need just magically appear here!\n"
"    @InjectByType\n"
"    private Lecture lecture;\n"
"    @InjectByType\n"
"    private Speaker speaker;\n"
"    @InjectByType\n"
"    private SlideShow slideShow;\n"
"    ...\n"
"}\n"
"----"

#: lecture.adoc:319
msgctxt "lecture.adoc:319"
msgid "== Режим лектора"
msgstr "== Lecturer mode"

#: lecture.adoc:331
msgctxt "lecture.adoc:331"
msgid ""
"[source,java]\n"
"----\n"
"//Читать лекции просто\n"
"public void lecture() {\n"
"    lecture.getSlides().forEach(\n"
"        slide -> {\n"
"            slideShow.show(slide.getText());\n"
"            speaker.speak(slide.getComment());\n"
"        }\n"
"    );\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"//It's easy to read lectures\n"
"public void lecture() {\n"
"    lecture.getSlides().forEach(\n"
"        slide -> {\n"
"            slideShow.show(slide.getText());\n"
"            speaker.speak(slide.getComment());\n"
"        }\n"
"    );\n"
"}"

#: lecture.adoc:340
msgctxt "lecture.adoc:340"
msgid ""
"//Main-метод\n"
"public static void main(String[] args) \n"
"                  throws ReflectiveOperationException {\n"
"    RobotLecturer lecturer = \n"
"        new ObjectFactory().createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"}\n"
"----"
msgstr ""
"//Main method\n"
"public static void main(String[] args) \n"
"                  throws ReflectiveOperationException {\n"
"    RobotLecturer lecturer = \n"
"        new ObjectFactory().createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"}\n"
"----"

#: lecture.adoc:342
msgctxt "lecture.adoc:342"
msgid "== Конфигуратор объекта"
msgstr "== Object Configurator"

#: lecture.adoc:350
msgctxt "lecture.adoc:350"
msgid ""
"[source,java]\n"
"----\n"
"@RequiredArgsConstructor\n"
"public class InjectByTypeAnnotationObjectConfigurator \n"
"                             implements ObjectConfigurator {\n"
"  //передадим сюда через конструктор ObjectFactory\n"
"  private final ObjectFactory factory;"
msgstr ""
"[source,java]\n"
"----\n"
"@RequiredArgsConstructor\n"
"public class InjectByTypeAnnotationObjectConfigurator \n"
"                             implements ObjectConfigurator {\n"
"  //let's pass the ObjectFactory here as a constructor parameter\n"
"  private final ObjectFactory factory;"

#: lecture.adoc:363
msgctxt "lecture.adoc:363"
msgid ""
"  @Override\n"
"  public void configure(Object t) throws ... {\n"
"    for (Field field : t.getClass().getDeclaredFields()) {\n"
"      if (field.isAnnotationPresent(InjectByType.class)) {\n"
"        field.setAccessible(true);\n"
"        //Мы же умеем по типу создавать объект?\n"
"        field.set(t, factory.createObject(field.getType()));\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"
msgstr ""
"  @Override\n"
"  public void configure(Object t) throws ... {\n"
"    for (Field field : t.getClass().getDeclaredFields()) {\n"
"      if (field.isAnnotationPresent(InjectByType.class)) {\n"
"        field.setAccessible(true);\n"
"        //Do we know how to create an object by its type?\n"
"        field.set(t, factory.createObject(field.getType()));\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:365
msgctxt "lecture.adoc:365"
msgid "== Как создаётся и конфигурируется объект"
msgstr "== How an object is being created and configured"

#: lecture.adoc:374
msgctxt "lecture.adoc:374"
msgid ""
"[source,java]\n"
"----\n"
"public class ObjectFactory {\n"
"  //Правда, тут напрашивается DI?\n"
"  private final Reflections scanner = \n"
"                          new Reflections(\"edu.phystech\");\n"
"  private final List<ObjectConfigurator> configurators = \n"
"                          new ArrayList<>();"
msgstr ""
"[source,java]\n"
"----\n"
"public class ObjectFactory {\n"
"  //Don't we need DI here also?\n"
"  private final Reflections scanner = \n"
"                          new Reflections(\"edu.phystech\");\n"
"  private final List<ObjectConfigurator> configurators = \n"
"                          new ArrayList<>();"

#: lecture.adoc:385
msgctxt "lecture.adoc:385"
msgid ""
"  public <T> T createObject(Class<? extends T> type) throws ... {\n"
"    //Находим реализацию запрошенного типа\n"
"    type = resolveImpl(type);\n"
"    //Создаём объект (с помощью конструктора по умолчанию, TODO)\n"
"    T t = type.newInstance();\n"
"    //Конфигурируем\n"
"    configure(t);\n"
"    ....\n"
"  }\n"
"----"
msgstr ""
"  public <T> T createObject(Class<? extends T> type) throws ... {\n"
"    //Let's find an implementation of the requested type\n"
"    type = resolveImpl(type);\n"
"    //Let's create an instance (using the default constructor, TODO)\n"
"    T t = type.newInstance();\n"
"    //Configuring\n"
"    configure(t);\n"
"    ....\n"
"  }\n"
"----"

#: lecture.adoc:387
msgctxt "lecture.adoc:387"
msgid "== Метод configure очень прост"
msgstr "== The `configure` method is very simple"

#: lecture.adoc:389
msgctxt "lecture.adoc:389"
msgid "[source,java]"
msgstr "[source,java]"

#: lecture.adoc:397
msgctxt "lecture.adoc:397"
msgid ""
"----\n"
"  private <T> void configure(T t) throws ... {\n"
"    for (ObjectConfigurator configurator : configurators) {\n"
"      configurator.configure(t);\n"
"    }\n"
"  }\n"
"----"
msgstr ""
"----\n"
"  private <T> void configure(T t) throws ... {\n"
"    for (ObjectConfigurator configurator : configurators) {\n"
"      configurator.configure(t);\n"
"    }\n"
"  }\n"
"----"

#: lecture.adoc:399
msgctxt "lecture.adoc:399"
msgid "== Как находится подходящая имплементация"
msgstr "== How is the appropriate implementation found?"

#: lecture.adoc:416
msgctxt "lecture.adoc:416"
msgid ""
"[source,java]\n"
"----\n"
"private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
"  if (type.isInterface()) {\n"
"    Set<Class<? extends T>> classes = \n"
"                         scanner.getSubTypesOf((Class<T>) type);\n"
"    if (classes.size() != 1) {\n"
"      throw new RuntimeException(\n"
"         \"0 or more than one implementation found for type \" \n"
"         + type + \" please update your config\");\n"
"    }\n"
"    type = classes.iterator().next();\n"
"  }\n"
"  return type;\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
"  if (type.isInterface()) {\n"
"    Set<Class<? extends T>> classes = \n"
"                         scanner.getSubTypesOf((Class<T>) type);\n"
"    if (classes.size() != 1) {\n"
"      throw new RuntimeException(\n"
"         \"0 or more than one implementation found for type \" \n"
"         + type + \" please update your config\");\n"
"    }\n"
"    type = classes.iterator().next();\n"
"  }\n"
"  return type;\n"
"}\n"
"----"

#: lecture.adoc:418
msgid "== Ищем конфигураторы автоматически!"
msgstr "== Let's look for configurators automatically!"

#: lecture.adoc:437
msgid ""
"[source,java]\n"
"----\n"
"//Конструктор ObjectFactory\n"
"public ObjectFactory() throws ReflectiveOperationException {\n"
"  Set<Class<? extends ObjectConfigurator>> classes =\n"
"              scanner.getSubTypesOf(ObjectConfigurator.class);\n"
"  for (Class<? extends ObjectConfigurator> aClass : classes) {\n"
"    try {\n"
"      Constructor<? extends ObjectConfigurator> constructor =\n"
"                       aClass.getConstructor(ObjectFactory.class);\n"
"      //инжектим себя через конструктор, по необходимости\n"
"      configurators.add(constructor.newInstance(this));\n"
"    } catch (NoSuchMethodException e){\n"
"      configurators.add(aClass.newInstance());\n"
"    }\n"
"  }\n"
"....//продолжение следует\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"//ObjectFactory constructor\n"
"public ObjectFactory() throws ReflectiveOperationException {\n"
"  Set<Class<? extends ObjectConfigurator>> classes =\n"
"              scanner.getSubTypesOf(ObjectConfigurator.class);\n"
"  for (Class<? extends ObjectConfigurator> aClass : classes) {\n"
"    try {\n"
"      Constructor<? extends ObjectConfigurator> constructor =\n"
"                       aClass.getConstructor(ObjectFactory.class);\n"
"      //we inject ourselves through constructor, if needed\n"
"      configurators.add(constructor.newInstance(this));\n"
"    } catch (NoSuchMethodException e){\n"
"      configurators.add(aClass.newInstance());\n"
"    }\n"
"  }\n"
"....//to be continued\n"
"----"

#: lecture.adoc:439
msgid "== Больше конфигураторов!"
msgstr "== More configurators!"

#: lecture.adoc:447
msgid ""
"[source,java]\n"
"----\n"
"@Retention(RUNTIME)\n"
"public @interface InjectRandomInt {\n"
"    int min();\n"
"    int max();\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"@Retention(RUNTIME)\n"
"public @interface InjectRandomInt {\n"
"    int min();\n"
"    int max();\n"
"}"

#: lecture.adoc:449
msgid "----"
msgstr "----"

#: lecture.adoc:473
msgid ""
"== InjectRandomIntObjectConfigurator\n"
"[source,java]\n"
"----\n"
"public class InjectRandomIntObjectConfigurator \n"
"                                 implements ObjectConfigurator {\n"
"  @Override\n"
"  public void configure(Object t) throws IllegalAccessException {\n"
"    Class<?> type = t.getClass();\n"
"    for (Field field : ReflectionUtils.getAllFields(type)) {\n"
"      InjectRandomInt annotation =\n"
"                        field.getAnnotation(InjectRandomInt.class);\n"
"      if (annotation != null) {\n"
"        int min = annotation.min();\n"
"        int max = annotation.max();\n"
"        int value = ThreadLocalRandom.current().nextInt(min, max+1);\n"
"        field.setAccessible(true);\n"
"        field.set(t, value);\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"
msgstr ""
"== InjectRandomIntObjectConfigurator\n"
"[source,java]\n"
"----\n"
"public class InjectRandomIntObjectConfigurator \n"
"                                 implements ObjectConfigurator {\n"
"  @Override\n"
"  public void configure(Object t) throws IllegalAccessException {\n"
"    Class<?> type = t.getClass();\n"
"    for (Field field : ReflectionUtils.getAllFields(type)) {\n"
"      InjectRandomInt annotation =\n"
"                        field.getAnnotation(InjectRandomInt.class);\n"
"      if (annotation != null) {\n"
"        int min = annotation.min();\n"
"        int max = annotation.max();\n"
"        int value = ThreadLocalRandom.current().nextInt(min, max+1);\n"
"        field.setAccessible(true);\n"
"        field.set(t, value);\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:475
msgid "== Итак, первые шаги:"
msgstr "== So, the first steps:"

#: lecture.adoc:485
msgid ""
"[graphviz,\"init1.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Создание -> конфигуратор1;\n"
"subgraph cluster_R {\n"
"label = \"Конфигурация\";"
msgstr ""
"[graphviz,\"init1.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Creation -> configurator1;\n"
"subgraph cluster_R {\n"
"label = \"Configuration\";"

#: lecture.adoc:488
msgctxt "lecture.adoc:488"
msgid ""
"    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
"{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
msgstr ""
"    configurator3 -> configurator2 -> configurator1 [dir=\"back\"];\n"
"{rank=same configurator1 configurator2 configurator3}"

#: lecture.adoc:490
msgctxt "lecture.adoc:490"
msgid "} "
msgstr "} "

#: lecture.adoc:493
msgctxt "lecture.adoc:493"
msgid ""
"}\n"
"----"
msgstr ""
"}\n"
"----"

#: lecture.adoc:495
msgid "== Инициализация объекта"
msgstr "== Object Initialization"

#: lecture.adoc:497
msgid ""
"* Почему конструктор не годится для действий, включающих в себя "
"инъектированные объекты?"
msgstr ""
"* Why is the constructor not suitable for actions that require the injected "
"values?"

#: lecture.adoc:500
msgid ""
"[.fragment]\n"
"* Инъекция может происходить после конструктора. Поэтому нужно специальное "
"действие, вызываемое после конструктора _и_ инъекции!"
msgstr ""
"[.fragment]\n"
"* Injection may occur after constructor. Therefore, you need a special "
"action that is called after constructor _and_ injection!"

#: lecture.adoc:502
msgid "== PostConstruct"
msgstr "== PostConstruct"

#: lecture.adoc:510
msgid ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"  @InjectByType\n"
"  private Lecture lecture;\n"
"  @InjectRandomInt(min = 1, max = 3)\n"
"  private int repeat;"
msgstr ""
"[source,java]\n"
"----\n"
"public class RobotLecturer {\n"
"  @InjectByType\n"
"  private Lecture lecture;\n"
"  @InjectRandomInt(min = 1, max = 3)\n"
"  private int repeat;"

#: lecture.adoc:520
msgid ""
"  @PostConstruct\n"
"  public void init() {\n"
"    //Место, где можно использовать все инжектированные значения\n"
"    for (int i = 0; i < repeat; i++)\n"
"      speaker.speak(\"Всем привет\");\n"
"  }\n"
"  ...\n"
"}\n"
"----"
msgstr ""
"  @PostConstruct\n"
"  public void init() {\n"
"    //A place where all injected values can be used\n"
"    for (int i = 0; i < repeat; i++)\n"
"      speaker.speak(\"Hello everyone\");\n"
"  }\n"
"  ...\n"
"}\n"
"----"

#: lecture.adoc:522
msgid "== Продолжаем дописывать createObject"
msgstr "== Let's continue to implement `createObject`"

#: lecture.adoc:533
msgid ""
"[source,java]\n"
"----\n"
"public <T> T createObject(Class<? extends T> type) throws ... {\n"
"  ....\n"
"  //Конфигурируем\n"
"  configure(t);\n"
"  //Запускаем методы PostConstruct\n"
"  invokeInitMethods(type, t);\n"
"  ....\n"
"}"
msgstr ""
"[source,java]\n"
"----\n"
"public <T> T createObject(Class<? extends T> type) throws ... {\n"
"  ....\n"
"  //Configuring\n"
"  configure(t);\n"
"  //running PostConstruct methods\n"
"  invokeInitMethods(type, t);\n"
"  ....\n"
"}"

#: lecture.adoc:543
msgid ""
"private <T> void invokeInitMethods(Class<? extends T> type, T t)\n"
"                                                      throws ... {\n"
"  for (Method method : type.getMethods()) {\n"
"    if (method.isAnnotationPresent(PostConstruct.class)) {\n"
"      method.invoke(t);\n"
"    }\n"
"  }\n"
"}\n"
"----"
msgstr ""
"private <T> void invokeInitMethods(Class<? extends T> type, T t)\n"
"                                                      throws ... {\n"
"  for (Method method : type.getMethods()) {\n"
"    if (method.isAnnotationPresent(PostConstruct.class)) {\n"
"      method.invoke(t);\n"
"    }\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:545
msgid "== Последовательность действий"
msgstr "== Sequence of actions"

#: lecture.adoc:555
msgid ""
"[graphviz,\"init2.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Создание -> конфигуратор1;\n"
"subgraph cluster_R {\n"
"label = \"Конфигурация\";"
msgstr ""
"[graphviz,\"init2.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Instantiation -> configurator1;\n"
"subgraph cluster_R {\n"
"label = \"Configuration\";"

#: lecture.adoc:558
msgctxt "lecture.adoc:558"
msgid ""
"    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
"{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
msgstr ""
"    configurator3 -> configurator2 -> configurator1 [dir=\"back\"];\n"
"{rank=same configurator1 configurator2 configurator3}"

#: lecture.adoc:560
msgctxt "lecture.adoc:560"
msgid "} "
msgstr "} "

#: lecture.adoc:562
msgctxt "lecture.adoc:562"
msgid "конфигуратор3 -> postConstruct"
msgstr "configurator3 -> postConstruct"

#: lecture.adoc:565
msgctxt "lecture.adoc:565"
msgid ""
"}\n"
"----"
msgstr ""
"}\n"
"----"

#: lecture.adoc:567
msgid "== Когда нужно модифицировать действие метода"
msgstr "== Sometimes we need to modify the action of the method"

#: lecture.adoc:574
msgid ""
"[source,java]\n"
"----\n"
"@Retention(RUNTIME)\n"
"public @interface Benchmark {\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@Retention(RUNTIME)\n"
"public @interface Benchmark {\n"
"}\n"
"----"

#: lecture.adoc:580
msgid ""
"----\n"
"[[[BENCHMARK method speak\n"
"Speaking: blah-blah-blah\n"
"Time: 107100ns]]]\n"
"----"
msgstr ""
"----\n"
"[[[BENCHMARK method speak\n"
"Speaking: blah-blah-blah\n"
"Time: 107100ns]]]\n"
"----"

#: lecture.adoc:582
msgid "== Прокси-объект"
msgstr "== Proxy object"

#: lecture.adoc:589
msgid ""
"[graphviz,\"proxy.png\"]\n"
"----\n"
"digraph G {\n"
"  graph [ dpi = 150 ];\n"
"  compound=true;\n"
"  rankdir=\"LR\";"
msgstr ""
"[graphviz,\"proxy.png\"]\n"
"----\n"
"digraph G {\n"
"  graph [ dpi = 150 ];\n"
"  compound=true;\n"
"  rankdir=\"LR\";"

#: lecture.adoc:591
msgid "  splines=\"line\";"
msgstr "  splines=\"line\";"

#: lecture.adoc:595
msgid ""
"  caller [shape=\"rectangle\", style=rounded];\n"
"  caller -> inv[lhead=cluster0;label=\"       \"];\n"
"  caller -> inv[arrowhead=none];"
msgstr ""
"  caller [shape=\"rectangle\", style=rounded];\n"
"  caller -> inv[lhead=cluster0;label=\"       \"];\n"
"  caller -> inv[arrowhead=none];"

#: lecture.adoc:598
msgid "  subgraph cluster0 {"
msgstr "  subgraph cluster0 {"

#: lecture.adoc:601
msgid ""
"    inv[style=invis,shape=point];\n"
"    target[shape=\"rectangle\", style=\"rounded\";]"
msgstr ""
"    inv[style=invis,shape=point];\n"
"    target[shape=\"rectangle\", style=\"rounded\";]"

#: lecture.adoc:604
msgid ""
"    label=\"proxy\";\n"
"    style=\"dashed,rounded\";"
msgstr ""
"    label=\"proxy\";\n"
"    style=\"dashed,rounded\";"

#: lecture.adoc:609
msgid ""
"    inv -> target[style=dashed;];\n"
"  }\n"
"}\n"
"----"
msgstr ""
"    inv -> target[style=dashed;];\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:611
msgid "== BenchmarkProxyConfigurator"
msgstr "== BenchmarkProxyConfigurator"

#: lecture.adoc:633
msgid ""
"[source,java]\n"
"----\n"
"public class BenchmarkProxyConfigurator \n"
"                                     implements ProxyConfigurator {\n"
"  @Override\n"
"  public <T> T wrapWithPoxy(T t, Class<? extends T> type) {\n"
"    boolean isProxyNeeded = type.isAnnotationPresent(Benchmark.class)\n"
"      || !ReflectionUtils.getAllMethods(type, method ->\n"
"             method.isAnnotationPresent(Benchmark.class)).isEmpty();\n"
"    if (isProxyNeeded) {\n"
"      return (T) Proxy.newProxyInstance(type.getClassLoader(),\n"
"          type.getInterfaces(), \n"
"          (proxy, method, args) -> {\n"
"            Method classMethod = type.getMethod(method.getName(),\n"
"                                method.getParameterTypes());\n"
"            return invoke(t, type, method, args, classMethod);\n"
"          });\n"
"    }\n"
"    return t;\n"
"}}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"public class BenchmarkProxyConfigurator \n"
"                                     implements ProxyConfigurator {\n"
"  @Override\n"
"  public <T> T wrapWithPoxy(T t, Class<? extends T> type) {\n"
"    boolean isProxyNeeded = type.isAnnotationPresent(Benchmark.class)\n"
"      || !ReflectionUtils.getAllMethods(type, method ->\n"
"             method.isAnnotationPresent(Benchmark.class)).isEmpty();\n"
"    if (isProxyNeeded) {\n"
"      return (T) Proxy.newProxyInstance(type.getClassLoader(),\n"
"          type.getInterfaces(), \n"
"          (proxy, method, args) -> {\n"
"            Method classMethod = type.getMethod(method.getName(),\n"
"                                method.getParameterTypes());\n"
"            return invoke(t, type, method, args, classMethod);\n"
"          });\n"
"    }\n"
"    return t;\n"
"}}\n"
"----"

#: lecture.adoc:635
msgid "== Proxied method invocation"
msgstr "== Proxied method invocation"

#: lecture.adoc:653
msgid ""
"[source,java]\n"
"----\n"
"private Object invoke(Object t, Class type, Method method, \n"
"            Object[] args, Method classMethod) throws ... {\n"
"  if (classMethod.isAnnotationPresent(Benchmark.class)\n"
"        || type.isAnnotationPresent(Benchmark.class)) {\n"
"    System.out.printf(\"[[[BENCHMARK method %s%n\", method.getName());\n"
"    long start = System.nanoTime();\n"
"    Object retVal = method.invoke(t, args);\n"
"    long end = System.nanoTime();\n"
"    System.out.printf(\"Time: %dns]]]%n\", end - start);\n"
"    return retVal;\n"
"  } else {\n"
"    return method.invoke(t, args);\n"
"  }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"private Object invoke(Object t, Class type, Method method, \n"
"            Object[] args, Method classMethod) throws ... {\n"
"  if (classMethod.isAnnotationPresent(Benchmark.class)\n"
"        || type.isAnnotationPresent(Benchmark.class)) {\n"
"    System.out.printf(\"[[[BENCHMARK method %s%n\", method.getName());\n"
"    long start = System.nanoTime();\n"
"    Object retVal = method.invoke(t, args);\n"
"    long end = System.nanoTime();\n"
"    System.out.printf(\"Time: %dns]]]%n\", end - start);\n"
"    return retVal;\n"
"  } else {\n"
"    return method.invoke(t, args);\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:655
msgid "== {zsp}Последовательность действий (окончательная картина){zsp}"
msgstr "== Sequence of actions (final picture)"

#: lecture.adoc:666
msgid ""
"[graphviz,\"init3.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Создание -> конфигуратор1;\n"
"subgraph cluster_R {\n"
"label = \"Конфигурация\";"
msgstr ""
"[graphviz,\"init3.png\"]\n"
"----\n"
"digraph G {\n"
"graph [ dpi = 180 ];\n"
"rankdir=\"LR\";\n"
"node[shape=box];\n"
"Create -> configurator1;\n"
"subgraph cluster_R {\n"
"label = \"Configuration\";"

#: lecture.adoc:669
msgctxt "lecture.adoc:669"
msgid ""
"    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
"{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
msgstr ""
"    configurator3 -> configurator2 -> configurator1 [dir=\"back\"];\n"
"{rank=same configurator1 configurator2 configurator3}"

#: lecture.adoc:671
msgctxt "lecture.adoc:671"
msgid "} "
msgstr "} "

#: lecture.adoc:673
msgctxt "lecture.adoc:673"
msgid "конфигуратор3 -> postConstruct"
msgstr "configurator3 -> postConstruct"

#: lecture.adoc:676
msgid ""
"subgraph cluster_S {\n"
"label = \"Проксирование\";"
msgstr ""
"subgraph cluster_S {\n"
"label = \"Proxying\";"

#: lecture.adoc:679
msgid ""
"    проксиконфигуратор2 -> проксиконфигуратор1  [dir=\"back\"];\n"
"{rank=same проксиконфигуратор2 проксиконфигуратор1}"
msgstr ""
"    proxyconfigurator2 -> proxyconfigurator1  [dir=\"back\"];\n"
"{rank=same proxyconfigurator2 proxyconfigurator1}"

#: lecture.adoc:681
msgctxt "lecture.adoc:681"
msgid "} "
msgstr "} "

#: lecture.adoc:685
msgid ""
"postConstruct -> проксиконфигуратор1\n"
"}\n"
"----"
msgstr ""
"postConstruct -> proxyconfigurator1\n"
"}\n"
"----"

#: lecture.adoc:693
msgid ""
"== Промежуточные выводы\n"
"* DI-контейнер реализует следующие этапы «настройки» объектов:\n"
"** создание\n"
"** конфигурация (injections)\n"
"** инициализация (postconstruct)\n"
"** проксирование\n"
"* DI-паттерн повторяет сам себя: многие детали DI-контейнера удобно "
"настраивать через DI!"
msgstr ""
"== Intermediate conclusions\n"
"* DI-container implements the following stages of \"setting up\" objects:\n"
"** instantiation\n"
"** configuration (injections)\n"
"** initialization (postconstruct)\n"
"** proxying\n"
"* DI pattern repeats itself: many DI container parts are convenient to "
"configure via DI!"

#: lecture.adoc:699
msgid ""
"[%notitle]\n"
"== Spring Framework"
msgstr ""
"[%notitle]\n"
"== Spring Framework"

#: lecture.adoc:703
msgid "image::springframework.png[{image-80-width}]"
msgstr "image::springframework.png[{image-80-width}]"

#: lecture.adoc:705
msgid ""
"_\"Perhaps one of the hardest parts of explaining Spring is classifying "
"exactly what it is\"_ -- Pro Spring 5, 5th ed., p. 1 "
msgstr ""
"_\"Perhaps one of the hardest parts of explaining Spring is classifying "
"exactly what it is\"_ -- Pro Spring 5, 5th ed., p. 1 "

#: lecture.adoc:707
msgid "== Spring Framework"
msgstr "== Spring Framework"

#: lecture.adoc:713
msgid ""
"* DI\n"
"* AOP\n"
"* Тестирование\n"
"* Интеграция с огромным количеством технологий\n"
"* Очень развитый (и продолжающий активно развиваться)"
msgstr ""
"* DI\n"
"* AOP\n"
"* Testing\n"
"* Integration with a huge number of technologies\n"
"* Very mature (and continuing to actively develop)"

#: lecture.adoc:715
msgctxt "lecture.adoc:715"
msgid "== Переписываем наш пример с «самодельного» фреймворка на Spring"
msgstr "== Rewrite our example from a \"homemade\" framework to Spring"

#: lecture.adoc:727
msgid ""
"Было:\n"
"[source,java]\n"
"----\n"
"public class Main {\n"
"  public static void main(String[] args) throws ... {\n"
"    RobotLecturer lecturer = new ObjectFactory()\n"
"                     .createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"  }\n"
"}\n"
"----"
msgstr ""
"Before:\n"
"[source,java]\n"
"----\n"
"public class Main {\n"
"  public static void main(String[] args) throws ... {\n"
"    RobotLecturer lecturer = new ObjectFactory()\n"
"                     .createObject(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:729
msgctxt "lecture.adoc:729"
msgid "== Переписываем наш пример с «самодельного» фреймворка на Spring"
msgstr "== Rewrite our example from a \"homemade\" framework to Spring"

#: lecture.adoc:743
msgid ""
"Стало:\n"
"[source,java]\n"
"----\n"
"@ComponentScan(\"edu.phystech.robotlecturer\")\n"
"public class Main {\n"
"  public static void main(String[] args) {\n"
"    ApplicationContext ctx = \n"
"      new AnnotationConfigApplicationContext(Main.class);\n"
"    RobotLecturer lecturer = ctx.getBean(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"  }\n"
"}\n"
"----"
msgstr ""
"After:\n"
"[source,java]\n"
"----\n"
"@ComponentScan(\"edu.phystech.robotlecturer\")\n"
"public class Main {\n"
"  public static void main(String[] args) {\n"
"    ApplicationContext ctx = \n"
"      new AnnotationConfigApplicationContext(Main.class);\n"
"    RobotLecturer lecturer = ctx.getBean(RobotLecturer.class);\n"
"    lecturer.lecture();\n"
"  }\n"
"}\n"
"----"

#: lecture.adoc:745
msgid "== Spring Beans"
msgstr "== Spring Beans"

#: lecture.adoc:753
msgid ""
"* В нашем примере -- \n"
"** `RobotLecturer`, \n"
"** `FirstLecture`, \n"
"** `SpeakerImpl`, \n"
"** `SlideShowImpl`.\n"
"* _Spring beans_ -- это переиспользуемые программные компоненты.\n"
"* Годится любой класс, как наш, так и из сторонней библиотеки."
msgstr ""
"* In our example -- \n"
"** `RobotLecturer`, \n"
"** `FirstLecture`, \n"
"** `SpeakerImpl`, \n"
"** `SlideShowImpl`.\n"
"* _Spring beans_ are reusable software components.\n"
"* Any class, both ours and those from a third-party library, is suitable."

#: lecture.adoc:755
msgid "== Способы конфигурации Spring"
msgstr "== Spring configuration methods"

#: lecture.adoc:762
msgid ""
"* Разновидности конфигураций Spring:\n"
"** Annotation-based\n"
"** XML-based\n"
"** Groovy-based\n"
"* Мы будем рассматривать только annotation-based, как наиболее употребимую в "
"настоящее время и практичную. \n"
"* В огромном количестве тьюториалов (и проектов) ещё встречается XML-"
"конфигурация."
msgstr ""
"* Varieties of Spring configurations:\n"
"** Annotation-based\n"
"** XML-based\n"
"** Groovy-based\n"
"* We will consider only annotation-based, as the most currently used and "
"practical. \n"
"* A huge number of tutorials (and projects) still have XML configuration."

#: lecture.adoc:764
msgid "== Как определять бины"
msgstr "== How to define beans"

#: lecture.adoc:772
msgid ""
"* Classpath Scanning: ищем проаннотированные классы в заданных пакетах.\n"
"** @Component\n"
"*** @Service\n"
"*** @Controller\n"
"*** @Repository\n"
"* Фабричные методы \n"
"** @Configuration -> @Bean"
msgstr ""
"* Classpath Scanning: looks for annotated classes in the given packages.\n"
"** @Component\n"
"*** @Service\n"
"*** @Controller\n"
"*** @Repository\n"
"* Factory methods \n"
"** @Configuration -> @Bean"

#: lecture.adoc:774
msgid "== Classpath scanning"
msgstr "== Classpath scanning"

#: lecture.adoc:779
msgid ""
"[source,java]\n"
"----\n"
"@ComponentScan(\"edu.phystech.robotlecturer\")\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@ComponentScan(\"edu.phystech.robotlecturer\")\n"
"----"

#: lecture.adoc:781
msgid "Атрибуты аннотации:"
msgstr "Annotation attributes:"

#: lecture.adoc:786
msgid ""
"* `String[] basePackages` -- базовые пакеты для сканирования в поисках "
"аннотированных компонент.\n"
"* `Class<?>[] basePackageClasses` -- как типобезопасная альтернатива, можно "
"указать классы. Пакеты каждого из указанных классов будут просканированы.\n"
"* Плюсы: удобно. \n"
"* Минусы: классы должны быть проаннторированы как `@Component`, `@Service` и "
"т. п., что не всегда возможно для сторонних библиотек."
msgstr ""
"* `String[] basePackages` -- base packages for scanning for annotated "
"components.\n"
"* `Class<?>[] basePackageClasses` -- as a type-safe alternative, you can "
"specify classes. Packages for each of these classes will be scanned.\n"
"* Pros: convenient. \n"
"* Cons: classes must be annotated with `@Component`, `@Service` etc., which "
"is not always possible for third-party code."

#: lecture.adoc:788
msgid "== `@Configuration` class"
msgstr "== `@Configuration` class"

#: lecture.adoc:790
msgid ""
"* Класс конфигурации должен быть либо явно указан через конструктор "
"`AnnotationConfigApplicationContext`, либо доступен через сканирование "
"пакетов (тогда нужно аннотировать класс как `@Configuration`). "
msgstr ""
"* The configuration class must either be explicitly specified through the "
"'AnnotationConfigApplicationContext' constructor or accessible through "
"package scanning (in which case the class should be annotated as "
"'@Configuration'). "

#: lecture.adoc:792
msgid "* Чтобы прописывать в классе бины, надо пользоваться `@Bean`."
msgstr "* In order to define beans, you need to use `@Bean` annotation."

#: lecture.adoc:794
msgid "== `@Configuration` class -- пример"
msgstr "== `@Configuration` class example"

#: lecture.adoc:799
msgid ""
"[source,java]\n"
"----\n"
"@Configuration\n"
"public class AppConfig{"
msgstr ""
"[source,java]\n"
"----\n"
"@Configuration\n"
"public class AppConfig{"

#: lecture.adoc:807
msgid ""
"  @Bean\n"
"  @Scope(BeanDefinition.SCOPE_PROTOTYPE)\n"
"  public Color randomColor(){\n"
"    ThreadLocalRandom random = ThreadLocalRandom.current();\n"
"    return new Color(random.nextInt(256), \n"
"                random.nextInt(256), random.nextInt(256));\n"
"  }"
msgstr ""
"  @Bean\n"
"  @Scope(BeanDefinition.SCOPE_PROTOTYPE)\n"
"  public Color randomColor(){\n"
"    ThreadLocalRandom random = ThreadLocalRandom.current();\n"
"    return new Color(random.nextInt(256), \n"
"                random.nextInt(256), random.nextInt(256));\n"
"  }"

#: lecture.adoc:811
msgid ""
"  ...\n"
"}\n"
"----"
msgstr ""
"  ...\n"
"}\n"
"----"

#: lecture.adoc:815
msgid "== Bean scope"
msgstr "== Bean scope"

#: lecture.adoc:819
msgid ""
"* `SCOPE_SINGLETON` -- по умолчанию. Создаётся один при первом запросе и "
"всюду впрыскивается единственный экземпляр.\n"
"* `SCOPE_PROTOTYPE` -- создаётся новый при каждом запросе.\n"
"* Есть ещё всякие, и можно создавать свои."
msgstr ""
"* `SCOPE_SINGLETON` is the default. Created only once at the first request "
"and the single instance is injected everywhere.\n"
"* `SCOPE_PROTOTYPE` -- a new instance is created with each request.\n"
"* There are many others, and you can create your own."

#: lecture.adoc:821
msgid "== @Lazy"
msgstr "== @Lazy"

#: lecture.adoc:823
msgid ""
"* По умолчанию все синглетоны создаются при поднятии контейнера (чтобы fail "
"fast, и чтобы избежать задержек при работе приложения)."
msgstr ""
"* By default, all singletons are created when the container is started (to "
"fail fast, and to avoid delays when the application is running)."

#: lecture.adoc:825
msgid ""
"* Для конкретного бина это поведение можно изменить при помощи аннотации "
"`@Lazy` (см. документацию)."
msgstr ""
"* For a specific bean, this behavior can be changed using the `@Lazy` "
"annotation (see documentation)."

#: lecture.adoc:827
msgid ""
"* Ленивая инициализация -- не такая хорошая идея, как кажется на первый "
"взгляд."
msgstr ""
"* Lazy initialization is not as good an idea as it seems at first glance."

#: lecture.adoc:829
msgid "== Bean name"
msgstr "== Bean name"

#: lecture.adoc:833
msgid ""
"* Каждый бин получает имя (id).\n"
"* По умолчанию, имя вычисляется из имени класса (`SpeakerImpl` -> "
"`\"speakerImpl\"`) или фабричного метода (`getSpeaker` -> `\"speaker\"`).\n"
"* Имя бина можно задать явно в параметре аннотации `@Component` и других "
"(например: `@Service(\"bestSpeaker\")`)."
msgstr ""
"* Each bean gets a name (id).\n"
"* By default, the name is calculated from the class name (`SpeakerImpl` -> "
"`''speakerImpl''`) or the name of the factory method (`getSpeaker` -> "
"`''speaker'`').\n"
"* The name of the bean can be specified explicitly in the annotation "
"parameter for `@Component` and other annotations (for example: "
"`@Service(\"bestSpeaker\")`)."

#: lecture.adoc:836
msgid "== Виды injection («впрыскивания»)"
msgstr "== Types of injection"

#: lecture.adoc:841
msgid ""
"* Constructor\n"
"* Setter\n"
"* Field\n"
"* Lookup method"
msgstr ""
"* Constructor\n"
"* Setter\n"
"* Field\n"
"* Lookup method"

#: lecture.adoc:843
msgid "== Constructor injection"
msgstr "== Constructor injection"

#: lecture.adoc:854
msgid ""
"[source,java]\n"
"----\n"
"@Component\n"
"@RequiredArgsConstructor\n"
"public class RobotLecturer {\n"
"    //автоматически будут переданы в конструктор\n"
"    private final Lecture lecture;\n"
"    private final Speaker speaker;\n"
"    private final SlideShow slideShow;\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@Component\n"
"@RequiredArgsConstructor\n"
"public class RobotLecturer {\n"
"    //will be automatically passed to constructor\n"
"    private final Lecture lecture;\n"
"    private final Speaker speaker;\n"
"    private final SlideShow slideShow;\n"
"----"

#: lecture.adoc:858
msgid ""
"* Внешне может быть незаметен (особенно с Lombok). \n"
"* Хорош для создания иммутабельных объектов. \n"
"* Много параметров конструктора? -- А точно столько надо?"
msgstr ""
"* Can be invisible at the first glance (especially with Lombok). \n"
"* Good for creating immutable objects. \n"
"* A lot of parameters in constructor? -- Do you really need that many?"

#: lecture.adoc:861
msgid "== Setter injection"
msgstr "== Setter injection"

#: lecture.adoc:870
msgid ""
"[source,java]\n"
"----\n"
"@Autowired\n"
"void setLecture(Lecture lecture) {\n"
"   //сеттер будет автоматически вызван после конструирования\n"
"   this.lecture = lecture;\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@Autowired\n"
"void setLecture(Lecture lecture) {\n"
"   //the setter will be automatically invoked after instantiation\n"
"   this.lecture = lecture;\n"
"}\n"
"----"

#: lecture.adoc:872
msgid ""
"* Хорош в ситуации, когда компонента сама себе способна предоставить "
"зависимость \"по умолчанию\"."
msgstr ""
"* Good in a situation where the component itself is able to provide a "
"\"default\" dependency."

#: lecture.adoc:874
msgid "== Field injection"
msgstr "== Field injection"

#: lecture.adoc:888
msgid ""
"[source,java]\n"
"----\n"
"@Component\n"
"public class RobotLecturer {\n"
"    //будут установлены через рефлексию после конструирования\n"
"    @Autowired\n"
"    private Lecture lecture;\n"
"    @Autowired\n"
"    private Speaker speaker;\n"
"    @Autowired\n"
"    private SlideShow slideShow;\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@Component\n"
"public class RobotLecturer {\n"
"    //will be set via reflection after instantiation\n"
"    @Autowired\n"
"    private Lecture lecture;\n"
"    @Autowired\n"
"    private Speaker speaker;\n"
"    @Autowired\n"
"    private SlideShow slideShow;\n"
"----"

#: lecture.adoc:891
msgid ""
"* Не плодит в классе сеттеры и конструкторы, но в целом сильно связывает код "
"и считается не очень удачной практикой. \n"
"* Хотя, в классах тестов -- это ровно то, что нужно."
msgstr ""
"* Does not multiply setters and constructors in the class, but in general it "
"strongly binds the code and is considered to be not a very good practice. \n"
"* Although, in test classes this is exactly what is needed."

#: lecture.adoc:894
msgctxt "lecture.adoc:894"
msgid "== Lookup method injection"
msgstr "== Lookup method injection"

#: lecture.adoc:896
msgid "Проблема бинов с разным жизненным циклом: `SCOPE_PROTOTYPE` не спасает."
msgstr ""
"The problem of beans with different life cycles: `SCOPE_PROTOTYPE` won't "
"work."

#: lecture.adoc:902
msgid ""
"[source,java]\n"
"----\n"
"@Component\n"
"@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n"
"public class Bar {...}"
msgstr ""
"[source,java]\n"
"----\n"
"@Component\n"
"@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n"
"public class Bar {...}"

#: lecture.adoc:907
msgid ""
"@Component\n"
"public class Foo {\n"
"    @Autowired\n"
"    private Bar bar;"
msgstr ""
"@Component\n"
"public class Foo {\n"
"    @Autowired\n"
"    private Bar bar;"

#: lecture.adoc:913
msgid ""
"    public  void bar(){\n"
"        //заинжектированный экземпляр bar всегда один и тот же \n"
"    }\n"
"}\n"
"----"
msgstr ""
"    public  void bar(){\n"
"        //the injected bar instance is always the same\n"
"    }\n"
"}\n"
"----"

#: lecture.adoc:915
msgctxt "lecture.adoc:915"
msgid "== Lookup method injection"
msgstr "== Lookup method injection"

#: lecture.adoc:922
msgid ""
"[source,java]\n"
"----\n"
"@Component\n"
"public abstract class Foo {\n"
"    @Lookup\n"
"    abstract Bar getBar();"
msgstr ""
"[source,java]\n"
"----\n"
"@Component\n"
"public abstract class Foo {\n"
"    @Lookup\n"
"    abstract Bar getBar();"

#: lecture.adoc:929
msgid ""
"    public  void bar(){\n"
"        Bar b = getBar();\n"
"        //теперь в b будет всякий раз новое (ну или одно и то же, \n"
"        //если убрать SCOPE_PROTOTYPE, хотя где тогда смысл?)\n"
"    }\n"
"}"
msgstr ""
"    public  void bar(){\n"
"        Bar b = getBar();\n"
"        //now in b there will be a new object each time (well, or the same \n"
"        //if you remove the SCOPE_PROTOTYPE, although where is the point?)\n"
"    }\n"
"}"

#: lecture.adoc:935
msgid ""
"Foo foo = ctx.getBean(Foo.class);\n"
"foo.bar(); foo.bar(); ...\n"
"----\n"
"[.fragment]\n"
"-- Как, мы инстанцируем абстрактный класс?! -- Нет, мы же инстанцируем "
"обёртку, на самом деле."
msgstr ""
"Foo foo = ctx.getBean(Foo.class);\n"
"foo.bar(); foo.bar(); ...\n"
"----\n"
"[.fragment]\n"
"- What? do we instantiate an abstract class?! - No, we're instantiating the "
"wrapper, actually."

#: lecture.adoc:937
msgid "== Lookup-метод может и не быть абстрактным"
msgstr "== Lookup method may be not abstract"

#: lecture.adoc:954
msgid ""
"[source,java]\n"
"----\n"
"@Component\n"
"public class Foo {\n"
"    //главное -- чтобы не был приватным\n"
"    @Lookup\n"
"    Bar getBar(){\n"
"        return null;\n"
"    };\n"
"    public  void bar(){\n"
"        //не null!\n"
"        Bar b = getBar();\n"
"        ...\n"
"    }\n"
"}\n"
"----"
msgstr ""
"[source,java]\n"
"----\n"
"@Component\n"
"public class Foo {\n"
"    //the main thing is that it should not be private\n"
"    @Lookup\n"
"    Bar getBar(){\n"
"        return null;\n"
"    };\n"
"    public  void bar(){\n"
"        //not null!\n"
"        Bar b = getBar();\n"
"        ...\n"
"    }\n"
"}\n"
"----"

#~ msgid ""
#~ "//== Часть 1. Введение\n"
#~ ":!figure-caption:"
#~ msgstr ""
#~ "//== Часть 1. Введение\n"
#~ ":!figure-caption:"

#~ msgctxt "lecture.adoc:43"
#~ msgid "== Проблемы GoF-cинглетона"
#~ msgstr "== GoF's Singleton problems"

#~ msgctxt "lecture.adoc:88"
#~ msgid "== Фабрика"
#~ msgstr "== Factory"

#~ msgctxt "lecture.adoc:124"
#~ msgid "== Dependency Injection"
#~ msgstr "== Dependency Injection"

#~ msgctxt "lecture.adoc:144"
#~ msgid ""
#~ "@enduml\n"
#~ "----"
#~ msgstr ""
#~ "@enduml\n"
#~ "----"

#~ msgctxt "lecture.adoc:289"
#~ msgid "== Лектор-робот"
#~ msgstr "== Robot lecturer"

#~ msgctxt "lecture.adoc:298"
#~ msgid ""
#~ "[plantuml, robotlecturer, png]\n"
#~ "----\n"
#~ "@startuml\n"
#~ "skinparam dpi 150 \n"
#~ "object RobotLecturer\n"
#~ "object Lecture\n"
#~ "object Speaker\n"
#~ "object SlideShow"
#~ msgstr ""
#~ "[plantuml, robotlecturer, png]\n"
#~ "----\n"
#~ "@startuml\n"
#~ "skinparam dpi 150 \n"
#~ "object RobotLecturer\n"
#~ "object Lecture\n"
#~ "object Speaker\n"
#~ "object SlideShow"

#~ msgctxt "lecture.adoc:318"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class RobotLecturer {\n"
#~ "    //«магическим» образом пусть тут появится то, что нужно!\n"
#~ "    @InjectByType\n"
#~ "    private Lecture lecture;\n"
#~ "    @InjectByType\n"
#~ "    private Speaker speaker;\n"
#~ "    @InjectByType\n"
#~ "    private SlideShow slideShow;\n"
#~ "    ...\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class RobotLecturer {\n"
#~ "    //let what we need just magically appear here!\n"
#~ "    @InjectByType\n"
#~ "    private Lecture lecture;\n"
#~ "    @InjectByType\n"
#~ "    private Speaker speaker;\n"
#~ "    @InjectByType\n"
#~ "    private SlideShow slideShow;\n"
#~ "    ...\n"
#~ "}\n"
#~ "----"

#~ msgctxt "lecture.adoc:320"
#~ msgid "== Режим лектора"
#~ msgstr "== Lecturer mode"

#~ msgctxt "lecture.adoc:332"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "//Читать лекции просто\n"
#~ "public void lecture() {\n"
#~ "    lecture.getSlides().forEach(\n"
#~ "        slide -> {\n"
#~ "            slideShow.show(slide.getText());\n"
#~ "            speaker.speak(slide.getComment());\n"
#~ "        }\n"
#~ "    );\n"
#~ "}"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "//It's easy to read lectures\n"
#~ "public void lecture() {\n"
#~ "    lecture.getSlides().forEach(\n"
#~ "        slide -> {\n"
#~ "            slideShow.show(slide.getText());\n"
#~ "            speaker.speak(slide.getComment());\n"
#~ "        }\n"
#~ "    );\n"
#~ "}"

#~ msgctxt "lecture.adoc:341"
#~ msgid ""
#~ "//Main-метод\n"
#~ "public static void main(String[] args) \n"
#~ "                  throws ReflectiveOperationException {\n"
#~ "    RobotLecturer lecturer = \n"
#~ "        new ObjectFactory().createObject(RobotLecturer.class);\n"
#~ "    lecturer.lecture();\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "//Main method\n"
#~ "public static void main(String[] args) \n"
#~ "                  throws ReflectiveOperationException {\n"
#~ "    RobotLecturer lecturer = \n"
#~ "        new ObjectFactory().createObject(RobotLecturer.class);\n"
#~ "    lecturer.lecture();\n"
#~ "}\n"
#~ "----"

#~ msgctxt "lecture.adoc:343"
#~ msgid "== Конфигуратор объекта"
#~ msgstr "== Object Configurator"

#~ msgctxt "lecture.adoc:351"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "@RequiredArgsConstructor\n"
#~ "public class InjectByTypeAnnotationObjectConfigurator \n"
#~ "                             implements ObjectConfigurator {\n"
#~ "  //передадим сюда через конструктор ObjectFactory\n"
#~ "  private final ObjectFactory factory;"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "@RequiredArgsConstructor\n"
#~ "public class InjectByTypeAnnotationObjectConfigurator \n"
#~ "                             implements ObjectConfigurator {\n"
#~ "  //let's pass the ObjectFactory here as a constructor parameter\n"
#~ "  private final ObjectFactory factory;"

#~ msgctxt "lecture.adoc:364"
#~ msgid ""
#~ "  @Override\n"
#~ "  public void configure(Object t) throws ... {\n"
#~ "    for (Field field : t.getClass().getDeclaredFields()) {\n"
#~ "      if (field.isAnnotationPresent(InjectByType.class)) {\n"
#~ "        field.setAccessible(true);\n"
#~ "        //Мы же умеем по типу создавать объект?\n"
#~ "        field.set(t, factory.createObject(field.getType()));\n"
#~ "      }\n"
#~ "    }\n"
#~ "  }\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "  @Override\n"
#~ "  public void configure(Object t) throws ... {\n"
#~ "    for (Field field : t.getClass().getDeclaredFields()) {\n"
#~ "      if (field.isAnnotationPresent(InjectByType.class)) {\n"
#~ "        field.setAccessible(true);\n"
#~ "        //Do we know how to create an object by its type?\n"
#~ "        field.set(t, factory.createObject(field.getType()));\n"
#~ "      }\n"
#~ "    }\n"
#~ "  }\n"
#~ "}\n"
#~ "----"

#~ msgctxt "lecture.adoc:366"
#~ msgid "== Как создаётся и конфигурируется объект"
#~ msgstr "== How an object is being created and configured"

#~ msgctxt "lecture.adoc:375"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class ObjectFactory {\n"
#~ "  //Правда, тут напрашивается DI?\n"
#~ "  private final Reflections scanner = \n"
#~ "                          new Reflections(\"edu.phystech\");\n"
#~ "  private final List<ObjectConfigurator> configurators = \n"
#~ "                          new ArrayList<>();"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class ObjectFactory {\n"
#~ "  //Don't we need DI here also?\n"
#~ "  private final Reflections scanner = \n"
#~ "                          new Reflections(\"edu.phystech\");\n"
#~ "  private final List<ObjectConfigurator> configurators = \n"
#~ "                          new ArrayList<>();"

#~ msgctxt "lecture.adoc:386"
#~ msgid ""
#~ "  public <T> T createObject(Class<? extends T> type) throws ... {\n"
#~ "    //Находим реализацию запрошенного типа\n"
#~ "    type = resolveImpl(type);\n"
#~ "    //Создаём объект (с помощью конструктора по умолчанию, TODO)\n"
#~ "    T t = type.newInstance();\n"
#~ "    //Конфигурируем\n"
#~ "    configure(t);\n"
#~ "    ....\n"
#~ "  }\n"
#~ "----"
#~ msgstr ""
#~ "  public <T> T createObject(Class<? extends T> type) throws ... {\n"
#~ "    //Let's find an implementation of the requested type\n"
#~ "    type = resolveImpl(type);\n"
#~ "    //Let's create an instance (using the default constructor, TODO)\n"
#~ "    T t = type.newInstance();\n"
#~ "    //Configuring\n"
#~ "    configure(t);\n"
#~ "    ....\n"
#~ "  }\n"
#~ "----"

#~ msgctxt "lecture.adoc:388"
#~ msgid "== Метод configure очень прост"
#~ msgstr "== The `configure` method is very simple"

#~ msgctxt "lecture.adoc:390"
#~ msgid "[source,java]"
#~ msgstr "[source,java]"

#~ msgctxt "lecture.adoc:398"
#~ msgid ""
#~ "----\n"
#~ "  private <T> void configure(T t) throws ... {\n"
#~ "    for (ObjectConfigurator configurator : configurators) {\n"
#~ "      configurator.configure(t);\n"
#~ "    }\n"
#~ "  }\n"
#~ "----"
#~ msgstr ""
#~ "----\n"
#~ "  private <T> void configure(T t) throws ... {\n"
#~ "    for (ObjectConfigurator configurator : configurators) {\n"
#~ "      configurator.configure(t);\n"
#~ "    }\n"
#~ "  }\n"
#~ "----"

#~ msgctxt "lecture.adoc:400"
#~ msgid "== Как находится подходящая имплементация"
#~ msgstr "== How is the appropriate implementation found?"

#~ msgctxt "lecture.adoc:417"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
#~ "  if (type.isInterface()) {\n"
#~ "    Set<Class<? extends T>> classes = \n"
#~ "                         scanner.getSubTypesOf((Class<T>) type);\n"
#~ "    if (classes.size() != 1) {\n"
#~ "      throw new RuntimeException(\n"
#~ "         \"0 or more than one implementation found for type \" \n"
#~ "         + type + \" please update your config\");\n"
#~ "    }\n"
#~ "    type = classes.iterator().next();\n"
#~ "  }\n"
#~ "  return type;\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
#~ "  if (type.isInterface()) {\n"
#~ "    Set<Class<? extends T>> classes = \n"
#~ "                         scanner.getSubTypesOf((Class<T>) type);\n"
#~ "    if (classes.size() != 1) {\n"
#~ "      throw new RuntimeException(\n"
#~ "         \"0 or more than one implementation found for type \" \n"
#~ "         + type + \" please update your config\");\n"
#~ "    }\n"
#~ "    type = classes.iterator().next();\n"
#~ "  }\n"
#~ "  return type;\n"
#~ "}\n"
#~ "----"

#~ msgctxt "lecture.adoc:559"
#~ msgid ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
#~ msgstr ""
#~ "    configurator3 -> configurator2 -> configurator1 [dir=\"back\"];\n"
#~ "{rank=same configurator1 configurator2 configurator3}"

#~ msgctxt "lecture.adoc:561"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "lecture.adoc:566"
#~ msgid ""
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "}\n"
#~ "----"

#~ msgctxt "lecture.adoc:670"
#~ msgid ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
#~ msgstr ""
#~ "    configurator3 -> configurator2 -> configurator1 [dir=\"back\"];\n"
#~ "{rank=same configurator1 configurator2 configurator3}"

#~ msgctxt "lecture.adoc:672"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "lecture.adoc:674"
#~ msgid "конфигуратор3 -> postConstruct"
#~ msgstr "configurator3 -> postConstruct"

#~ msgctxt "lecture.adoc:682"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "lecture.adoc:730"
#~ msgid "== Переписываем наш пример с «самодельного» фреймворка на Spring"
#~ msgstr "== Rewrite our example from a \"homemade\" framework to Spring"

#~ msgctxt "lecture.adoc:916"
#~ msgid "== Lookup method injection"
#~ msgstr "== Lookup method injection"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:42"
#~ msgid "== Проблемы GoF-cинглетона"
#~ msgstr "== Проблемы GoF-cинглетона"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:87"
#~ msgid "== Фабрика"
#~ msgstr "== Фабрика"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:123"
#~ msgid "== Dependency Injection"
#~ msgstr "== Dependency Injection"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:143"
#~ msgid ""
#~ "@enduml\n"
#~ "----"
#~ msgstr ""
#~ "@enduml\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:288"
#~ msgid "== Лектор-робот"
#~ msgstr "== Лектор-робот"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:297"
#~ msgid ""
#~ "[plantuml, robotlecturer, png]\n"
#~ "----\n"
#~ "@startuml\n"
#~ "skinparam dpi 150 \n"
#~ "object RobotLecturer\n"
#~ "object Lecture\n"
#~ "object Speaker\n"
#~ "object SlideShow"
#~ msgstr ""
#~ "[plantuml, robotlecturer, png]\n"
#~ "----\n"
#~ "@startuml\n"
#~ "skinparam dpi 150 \n"
#~ "object RobotLecturer\n"
#~ "object Lecture\n"
#~ "object Speaker\n"
#~ "object SlideShow"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:317"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class RobotLecturer {\n"
#~ "    //«магическим» образом пусть тут появится то, что нужно!\n"
#~ "    @InjectByType\n"
#~ "    private Lecture lecture;\n"
#~ "    @InjectByType\n"
#~ "    private Speaker speaker;\n"
#~ "    @InjectByType\n"
#~ "    private SlideShow slideShow;\n"
#~ "    ...\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class RobotLecturer {\n"
#~ "    //«магическим» образом пусть тут появится то, что нужно!\n"
#~ "    @InjectByType\n"
#~ "    private Lecture lecture;\n"
#~ "    @InjectByType\n"
#~ "    private Speaker speaker;\n"
#~ "    @InjectByType\n"
#~ "    private SlideShow slideShow;\n"
#~ "    ...\n"
#~ "}\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:319"
#~ msgid "== Режим лектора"
#~ msgstr "== Режим лектора"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:331"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "//Читать лекции просто\n"
#~ "public void lecture() {\n"
#~ "    lecture.getSlides().forEach(\n"
#~ "        slide -> {\n"
#~ "            slideShow.show(slide.getText());\n"
#~ "            speaker.speak(slide.getComment());\n"
#~ "        }\n"
#~ "    );\n"
#~ "}"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "//Читать лекции просто\n"
#~ "public void lecture() {\n"
#~ "    lecture.getSlides().forEach(\n"
#~ "        slide -> {\n"
#~ "            slideShow.show(slide.getText());\n"
#~ "            speaker.speak(slide.getComment());\n"
#~ "        }\n"
#~ "    );\n"
#~ "}"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:340"
#~ msgid ""
#~ "//Main-метод\n"
#~ "public static void main(String[] args) \n"
#~ "                  throws ReflectiveOperationException {\n"
#~ "    RobotLecturer lecturer = \n"
#~ "        new ObjectFactory().createObject(RobotLecturer.class);\n"
#~ "    lecturer.lecture();\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "//Main-метод\n"
#~ "public static void main(String[] args) \n"
#~ "                  throws ReflectiveOperationException {\n"
#~ "    RobotLecturer lecturer = \n"
#~ "        new ObjectFactory().createObject(RobotLecturer.class);\n"
#~ "    lecturer.lecture();\n"
#~ "}\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:342"
#~ msgid "== Конфигуратор объекта"
#~ msgstr "== Конфигуратор объекта"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:350"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "@RequiredArgsConstructor\n"
#~ "public class InjectByTypeAnnotationObjectConfigurator \n"
#~ "                             implements ObjectConfigurator {\n"
#~ "  //передадим сюда через конструктор ObjectFactory\n"
#~ "  private final ObjectFactory factory;"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "@RequiredArgsConstructor\n"
#~ "public class InjectByTypeAnnotationObjectConfigurator \n"
#~ "                             implements ObjectConfigurator {\n"
#~ "  //передадим сюда через конструктор ObjectFactory\n"
#~ "  private final ObjectFactory factory;"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:363"
#~ msgid ""
#~ "  @Override\n"
#~ "  public void configure(Object t) throws ... {\n"
#~ "    for (Field field : t.getClass().getDeclaredFields()) {\n"
#~ "      if (field.isAnnotationPresent(InjectByType.class)) {\n"
#~ "        field.setAccessible(true);\n"
#~ "        //Мы же умеем по типу создавать объект?\n"
#~ "        field.set(t, factory.createObject(field.getType()));\n"
#~ "      }\n"
#~ "    }\n"
#~ "  }\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "  @Override\n"
#~ "  public void configure(Object t) throws ... {\n"
#~ "    for (Field field : t.getClass().getDeclaredFields()) {\n"
#~ "      if (field.isAnnotationPresent(InjectByType.class)) {\n"
#~ "        field.setAccessible(true);\n"
#~ "        //Мы же умеем по типу создавать объект?\n"
#~ "        field.set(t, factory.createObject(field.getType()));\n"
#~ "      }\n"
#~ "    }\n"
#~ "  }\n"
#~ "}\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:365"
#~ msgid "== Как создаётся и конфигурируется объект"
#~ msgstr "== Как создаётся и конфигурируется объект"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:374"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class ObjectFactory {\n"
#~ "  //Правда, тут напрашивается DI?\n"
#~ "  private final Reflections scanner = \n"
#~ "                          new Reflections(\"edu.phystech\");\n"
#~ "  private final List<ObjectConfigurator> configurators = \n"
#~ "                          new ArrayList<>();"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "public class ObjectFactory {\n"
#~ "  //Правда, тут напрашивается DI?\n"
#~ "  private final Reflections scanner = \n"
#~ "                          new Reflections(\"edu.phystech\");\n"
#~ "  private final List<ObjectConfigurator> configurators = \n"
#~ "                          new ArrayList<>();"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:385"
#~ msgid ""
#~ "  public <T> T createObject(Class<? extends T> type) throws ... {\n"
#~ "    //Находим реализацию запрошенного типа\n"
#~ "    type = resolveImpl(type);\n"
#~ "    //Создаём объект (с помощью конструктора по умолчанию, TODO)\n"
#~ "    T t = type.newInstance();\n"
#~ "    //Конфигурируем\n"
#~ "    configure(t);\n"
#~ "    ....\n"
#~ "  }\n"
#~ "----"
#~ msgstr ""
#~ "  public <T> T createObject(Class<? extends T> type) throws ... {\n"
#~ "    //Находим реализацию запрошенного типа\n"
#~ "    type = resolveImpl(type);\n"
#~ "    //Создаём объект (с помощью конструктора по умолчанию, TODO)\n"
#~ "    T t = type.newInstance();\n"
#~ "    //Конфигурируем\n"
#~ "    configure(t);\n"
#~ "    ....\n"
#~ "  }\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:387"
#~ msgid "== Метод configure очень прост"
#~ msgstr "== Метод configure очень прост"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:389"
#~ msgid "[source,java]"
#~ msgstr "[source,java]"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:397"
#~ msgid ""
#~ "----\n"
#~ "  private <T> void configure(T t) throws ... {\n"
#~ "    for (ObjectConfigurator configurator : configurators) {\n"
#~ "      configurator.configure(t);\n"
#~ "    }\n"
#~ "  }\n"
#~ "----"
#~ msgstr ""
#~ "----\n"
#~ "  private <T> void configure(T t) throws ... {\n"
#~ "    for (ObjectConfigurator configurator : configurators) {\n"
#~ "      configurator.configure(t);\n"
#~ "    }\n"
#~ "  }\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:399"
#~ msgid "== Как находится подходящая имплементация"
#~ msgstr "== Как находится подходящая имплементация"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:416"
#~ msgid ""
#~ "[source,java]\n"
#~ "----\n"
#~ "private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
#~ "  if (type.isInterface()) {\n"
#~ "    Set<Class<? extends T>> classes = \n"
#~ "                         scanner.getSubTypesOf((Class<T>) type);\n"
#~ "    if (classes.size() != 1) {\n"
#~ "      throw new RuntimeException(\n"
#~ "         \"0 or more than one implementation found for type \" \n"
#~ "         + type + \" please update your config\");\n"
#~ "    }\n"
#~ "    type = classes.iterator().next();\n"
#~ "  }\n"
#~ "  return type;\n"
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "[source,java]\n"
#~ "----\n"
#~ "private <T> Class<? extends T> resolveImpl(Class<? extends T> type){\n"
#~ "  if (type.isInterface()) {\n"
#~ "    Set<Class<? extends T>> classes = \n"
#~ "                         scanner.getSubTypesOf((Class<T>) type);\n"
#~ "    if (classes.size() != 1) {\n"
#~ "      throw new RuntimeException(\n"
#~ "         \"0 or more than one implementation found for type \" \n"
#~ "         + type + \" please update your config\");\n"
#~ "    }\n"
#~ "    type = classes.iterator().next();\n"
#~ "  }\n"
#~ "  return type;\n"
#~ "}\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:558"
#~ msgid ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
#~ msgstr ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:560"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:565"
#~ msgid ""
#~ "}\n"
#~ "----"
#~ msgstr ""
#~ "}\n"
#~ "----"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:669"
#~ msgid ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"
#~ msgstr ""
#~ "    конфигуратор3 -> конфигуратор2 -> конфигуратор1 [dir=\"back\"];\n"
#~ "{rank=same конфигуратор1 конфигуратор2 конфигуратор3}"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:671"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:673"
#~ msgid "конфигуратор3 -> postConstruct"
#~ msgstr "конфигуратор3 -> postConstruct"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:681"
#~ msgid "} "
#~ msgstr "} "

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:729"
#~ msgid "== Переписываем наш пример с «самодельного» фреймворка на Spring"
#~ msgstr "== Переписываем наш пример с «самодельного» фреймворка на Spring"

#~ msgctxt "./slides13/src/main/asciidoc/lecture.adoc:915"
#~ msgid "== Lookup method injection"
#~ msgstr "== Lookup method injection"
